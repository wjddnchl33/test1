#include <stdio.h>

// 배열을 출력하는 함수
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// 힙을 만들기 위한 함수 (최대 힙을 구축)
void heapify(int arr[], int n, int i) {
    int largest = i;        // 루트 노드
    int left = 2 * i + 1;   // 왼쪽 자식
    int right = 2 * i + 2;  // 오른쪽 자식

    // 왼쪽 자식이 더 큰 경우
    if (left < n && arr[left] > arr[largest]) {
        largest = left;
    }

    // 오른쪽 자식이 더 큰 경우
    if (right < n && arr[right] > arr[largest]) {
        largest = right;
    }

    // 만약 가장 큰 값이 루트가 아니라면 교환하고, 힙을 재구성
    if (largest != i) {
        int temp = arr[i];
        arr[i] = arr[largest];
        arr[largest] = temp;

        // 교환된 자식이 다시 힙 성질을 만족하도록 힙화
        heapify(arr, n, largest);
    }
}

// 힙 정렬 함수
void heapSort(int arr[], int n) {
    // 힙을 구성하는 과정 (배열을 최대 힙으로 변환)
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i);
    }

    // 힙에서 루트를 하나씩 빼면서 정렬
    for (int i = n - 1; i > 0; i--) {
        // 루트(최대값)를 배열의 끝과 교환
        int temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;

        // 남은 부분을 다시 힙화하여 힙 성질을 유지
        heapify(arr, i, 0);
    }
}

int main() {
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("정렬 전 배열: \n");
    printArray(arr, n);

    // 힙 정렬 호출
    heapSort(arr, n);

    printf("정렬 후 배열: \n");
    printArray(arr, n);

    return 0;
}
