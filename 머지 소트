#include <stdio.h>

// 배열을 출력하는 함수
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// 배열을 합치는 함수 (merge)
void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;  // 왼쪽 부분 배열의 크기
    int n2 = right - mid;     // 오른쪽 부분 배열의 크기

    // 임시 배열 생성
    int L[n1], R[n2];

    // 왼쪽 부분 배열 복사
    for (int i = 0; i < n1; i++) {
        L[i] = arr[left + i];
    }

    // 오른쪽 부분 배열 복사
    for (int j = 0; j < n2; j++) {
        R[j] = arr[mid + 1 + j];
    }

    // 병합 과정
    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // 남은 요소들 처리
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

// 머지 소트 함수 (재귀적으로 분할 후 병합)
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        // 중간값을 구해서 배열을 반으로 나눔
        int mid = left + (right - left) / 2;

        // 왼쪽과 오른쪽 부분을 각각 정렬
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);

        // 두 부분 배열을 병합
        merge(arr, left, mid, right);
    }
}

int main() {
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("정렬 전 배열: \n");
    printArray(arr, n);

    // 머지 소트 호출
    mergeSort(arr, 0, n - 1);

    printf("정렬 후 배열: \n");
    printArray(arr, n);

    return 0;
}
