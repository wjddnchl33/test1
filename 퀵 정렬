#include <stdio.h>

// 배열을 출력하는 함수
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// 배열에서 두 원소를 교환하는 함수
void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// 파티션 함수 (피벗을 기준으로 배열을 나누는 함수)
int partition(int arr[], int low, int high) {
    int pivot = arr[high];  // 피벗을 마지막 요소로 설정
    int i = low - 1;  // i는 작은 값들이 모여야 할 위치

    // low부터 high-1까지 반복하여, 작은 값은 왼쪽으로, 큰 값은 오른쪽으로 이동
    for (int j = low; j < high; j++) {
        if (arr[j] < pivot) {
            i++;  // 작은 값이 나왔으므로 i를 증가시킴
            swap(&arr[i], &arr[j]);  // 값을 교환
        }
    }
    
    // 피벗을 올바른 위치에 놓기 위해 교환
    swap(&arr[i + 1], &arr[high]);
    
    return i + 1;  // 피벗이 위치한 인덱스 반환
}

// 퀵정렬 함수 (재귀적으로 분할 정복 수행)
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        // 파티션을 기준으로 배열을 두 부분으로 나누고, 재귀적으로 정렬
        int pi = partition(arr, low, high);
        
        quickSort(arr, low, pi - 1);  // 피벗 왼쪽 부분 정렬
        quickSort(arr, pi + 1, high); // 피벗 오른쪽 부분 정렬
    }
}

int main() {
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("정렬 전 배열: \n");
    printArray(arr, n);

    // 퀵정렬 호출
    quickSort(arr, 0, n - 1);

    printf("정렬 후 배열: \n");
    printArray(arr, n);

    return 0;
}
