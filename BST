#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100 // 트리의 최대 크기

// 트리를 표현하는 배열
int tree[MAX_SIZE];

// 삽입 함수
void insert(int value, int index) {
    // 트리가 비어 있으면 삽입
    if (index >= MAX_SIZE) {
        printf("트리가 가득 찼습니다.\n");
        return;
    }
    
    if (tree[index] == 0) {
        tree[index] = value; // 해당 위치에 값 삽입
        return;
    }

    // 이진 탐색 트리 규칙에 맞게 삽입
    if (value < tree[index]) {
        insert(value, 2 * index + 1); // 왼쪽 자식
    } else if (value > tree[index]) {
        insert(value, 2 * index + 2); // 오른쪽 자식
    }
}

// 검색 함수
int search(int value, int index) {
    if (index >= MAX_SIZE || tree[index] == 0) {
        return -1; // 값이 트리에 없으면 -1 반환
    }

    if (tree[index] == value) {
        return index; // 값을 찾으면 인덱스 반환
    }

    // 이진 탐색 트리 규칙에 맞게 검색
    if (value < tree[index]) {
        return search(value, 2 * index + 1); // 왼쪽 자식
    } else {
        return search(value, 2 * index + 2); // 오른쪽 자식
    }
}

// 중위 순회 (Inorder Traversal) 함수
void inorder(int index) {
    if (index >= MAX_SIZE || tree[index] == 0) {
        return;
    }

    inorder(2 * index + 1); // 왼쪽 자식
    printf("%d ", tree[index]); // 현재 노드 출력
    inorder(2 * index + 2); // 오른쪽 자식
}

// 메인 함수
int main() {
    // 트리 배열 초기화 (0은 비어있는 위치)
    for (int i = 0; i < MAX_SIZE; i++) {
        tree[i] = 0;
    }

    // 값 삽입
    insert(50, 0); // 루트 노드에 50 삽입
    insert(30, 0); // 30은 50보다 작으므로 왼쪽에 삽입
    insert(70, 0); // 70은 50보다 크므로 오른쪽에 삽입
    insert(20, 0); // 20은 30보다 작으므로 왼쪽에 삽입
    insert(40, 0); // 40은 30보다 크므로 오른쪽에 삽입
    insert(60, 0); // 60은 70보다 작으므로 왼쪽에 삽입
    insert(80, 0); // 80은 70보다 크므로 오른쪽에 삽입

    // 중위 순회 출력
    printf("중위 순회 결과: ");
    inorder(0);
    printf("\n");

    // 검색 테스트
    int value = 40;
    int index = search(value, 0);
    if (index != -1) {
        printf("값 %d는 트리에서 인덱스 %d에 존재합니다.\n", value, index);
    } else {
        printf("값 %d는 트리에 존재하지 않습니다.\n", value);
    }

    return 0;
}
